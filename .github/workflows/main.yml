name: Deploy to Staging Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    
    env:
      DEPLOY_PATH: /home3/ayodejis/api.ayodejisticksdev.com.ng
      PHP_PATH: /opt/cpanel/ea-php82/root/usr/bin

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql
          tools: composer:v2
          coverage: none

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: |
          composer install --prefer-dist --no-progress --no-interaction --no-dev
          composer dump-autoload --optimize

      - name: Prepare Deployment Package
        run: |
          # Remove development files
          rm -f .env.example
          rm -f composer.json composer.lock
          find . -name "*.md" -delete
          
          # Create deployment archive
          tar -czf deployment.tar.gz --exclude='.git' --exclude='.github' --exclude='deployment.tar.gz' .

      - name: Deploy to Server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          port: ${{ secrets.SSH_REMOTE_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment.tar.gz"
          target: "${{ env.DEPLOY_PATH }}"
          strip_components: 0

      - name: Execute Server Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          port: ${{ secrets.SSH_REMOTE_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            
            cd ${{ env.DEPLOY_PATH }}
            
            # Backup current deployment
            if [ -d "current" ]; then
              timestamp=$(date +%Y%m%d_%H%M%S)
              cp -r current "backup_$timestamp"
            fi
            
            # Extract new deployment
            tar -xzf deployment.tar.gz -C .
            rm -f deployment.tar.gz
            
            # Ensure proper PHP version
            export PATH=${{ env.PHP_PATH }}:$PATH
            
            # Environment setup
            if [ ! -f ".env" ]; then
              echo "Warning: .env file not found. Please ensure it's configured."
            fi
            
            # Install production dependencies (without dev dependencies)
            /opt/cpanel/ea-php82/root/usr/bin/php /opt/cpanel/composer/bin/composer install --no-dev --optimize-autoloader --no-interaction
            
            # Set secure permissions
            find . -type f -exec chmod 644 {} \;
            find . -type d -exec chmod 755 {} \;
            chmod -R 775 storage/
            chmod -R 775 bootstrap/cache/
            chgrp -R hospital storage bootstrap/cache
            
            # Laravel specific optimizations
            /opt/cpanel/ea-php82/root/usr/bin/php artisan config:cache
            /opt/cpanel/ea-php82/root/usr/bin/php artisan route:cache
            /opt/cpanel/ea-php82/root/usr/bin/php artisan view:cache
            
            # Run migrations safely
            read -r -p "Run database migrations? (y/N): " response
            if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
              /opt/cpanel/ea-php82/root/usr/bin/php artisan migrate --force
            else
              echo "Skipping database migrations"
            fi
            
            # Clear and cache again
            /opt/cpanel/ea-php82/root/usr/bin/php artisan optimize:clear
            /opt/cpanel/ea-php82/root/usr/bin/php artisan config:cache
            /opt/cpanel/ea-php82/root/usr/bin/php artisan route:cache
            
            # Cleanup old backups (keep last 5)
            ls -dt backup_* | tail -n +6 | xargs rm -rf
            
            echo "✅ Deployment completed successfully!"

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          port: ${{ secrets.SSH_REMOTE_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            export PATH=${{ env.PHP_PATH }}:$PATH
            
            # Verify Laravel installation
            if /opt/cpanel/ea-php82/root/usr/bin/php artisan --version > /dev/null 2>&1; then
              echo "✅ Laravel artisan command working"
            else
              echo "❌ Laravel artisan command failed"
              exit 1
            fi
            
            # Check storage permissions
            if [ -w "storage" ] && [ -w "bootstrap/cache" ]; then
              echo "✅ Storage directories are writable"
            else
              echo "❌ Storage directory permissions issue"
              exit 1
            fi
            
            echo "🎉 Deployment verification passed!"
